#pragma checksum "C:\Users\DELL-TI\source\repos\DOMExemplo\DOMExemplo\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "74a3b4e5bcd5cc22165c10028a7f6f45ccbbf428"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\DELL-TI\source\repos\DOMExemplo\DOMExemplo\Views\_ViewImports.cshtml"
using DOMExemplo;

#line default
#line hidden
#line 2 "C:\Users\DELL-TI\source\repos\DOMExemplo\DOMExemplo\Views\_ViewImports.cshtml"
using DOMExemplo.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"74a3b4e5bcd5cc22165c10028a7f6f45ccbbf428", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a579253b45e98005cc3b0ff0143d92e538d03c8b", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 1069, true);
            WriteLiteral(@"
<div class=""row"">
    <div class=""col-sm-3 mb-1"">
        <input type=""text"" id=""Valor1""/>
    </div>
    <div class=""col-sm-9"">
        <input type=""radio"" name=""oper"" id=""+""> +
    </div>
</div>
<div class=""row"">
    <div class=""col-sm-1 offset-3 mb-2"">
        <input type=""radio"" name=""oper"" id=""-""> -
    </div>
    <div class=""col-sm-1 mr-3"">
        <input id=""btnCalc""
               type=""button""
               value=""Calcular"" />
    </div>
    <div class=""col-sm-2 mr-4"">
        <input type=""text"" id=""Resultado"" disabled=""disabled"" />
    </div>
    <div class=""col-sm-1"">
        <input id=""btnLimp""
               type=""button""
               value=""Limpar"" />
    </div>
</div>
<div class=""row"">
    <div class=""col-sm-3 mb-1"">
        <input type=""text"" id=""Valor2"" />
    </div>
    <div class=""col-sm-9"">
        <input type=""radio"" name=""oper"" id=""/""> /
    </div>
</div>
<div class=""row"">
    <div class=""col-sm-1 offset-3 mb-2"">
        <input type=""radio"" name=""");
            WriteLiteral("oper\" id=\"*\"> *\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(1087, 1495, true);
                WriteLiteral(@"

    <script>


    function btnCliqueAquiOnClick() {

        let x = parseFloat(document.getElementById(""Valor1"").value);
        let y = parseFloat(document.getElementById(""Valor2"").value);

        if (isNaN(x)) {
            alert(""Primeiro Valor é invalido"");
        }
        else if (isNaN(y)) {
            alert(""Segundo Valor é invalido"");
        }
        else {
            if (document.getElementById(""+"").checked) {
                document.getElementById(""Resultado"").value = x + y;
            }
            else if (document.getElementById(""-"").checked) {
                document.getElementById(""Resultado"").value = x - y;
            }
            else if (document.getElementById(""/"").checked) {
                document.getElementById(""Resultado"").value = x / y;
            }
            else if (document.getElementById(""*"").checked) {
                document.getElementById(""Resultado"").value = x * y;
            }
            else {
                alert(""Selecio");
                WriteLiteral(@"ne uma operação."");
            }
        }
    }


        function btnLimparOnClick() {
            document.getElementById(""Valor1"").value = """";
            document.getElementById(""Valor2"").value = """";
            document.getElementById(""Resultado"").value = """";
        }

    document.getElementById(""btnCalc"")
            .onclick = btnCliqueAquiOnClick;
    document.getElementById(""btnLimp"")
        .onclick = btnLimparOnClick;

    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
